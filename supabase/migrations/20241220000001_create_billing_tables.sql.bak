-- Create credit_wallets table
CREATE TABLE IF NOT EXISTS credit_wallets (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  "orgId" TEXT NOT NULL UNIQUE,
  balance INTEGER NOT NULL DEFAULT 0,
  currency TEXT NOT NULL DEFAULT 'BRL',
  "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create usage_events table
CREATE TABLE IF NOT EXISTS usage_events (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  "orgId" TEXT NOT NULL,
  "agentId" TEXT NOT NULL,
  channel TEXT NOT NULL CHECK (channel IN ('web', 'whatsapp')),
  "inputTokens" INTEGER NOT NULL DEFAULT 0,
  "outputTokens" INTEGER NOT NULL DEFAULT 0,
  "costCredits" INTEGER NOT NULL DEFAULT 0,
  "messageId" TEXT,
  meta JSONB,
  "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create topup_events table
CREATE TABLE IF NOT EXISTS topup_events (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  "orgId" TEXT NOT NULL,
  "addedCredits" INTEGER NOT NULL,
  reason TEXT,
  "performedByUserId" TEXT NOT NULL,
  "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_credit_wallets_orgid ON credit_wallets(org_id);
CREATE INDEX IF NOT EXISTS idx_usage_events_orgid ON usage_events(org_id);
CREATE INDEX IF NOT EXISTS idx_usage_events_messageid ON usage_events(message_id) WHERE message_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_usage_events_created_at ON usage_events(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_topup_events_orgid ON topup_events(org_id);
CREATE INDEX IF NOT EXISTS idx_topup_events_created_at ON topup_events(created_at DESC);

-- Enable RLS (Row Level Security)
ALTER TABLE credit_wallets ENABLE ROW LEVEL SECURITY;
ALTER TABLE usage_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE topup_events ENABLE ROW LEVEL SECURITY;

-- RLS Policies for credit_wallets
CREATE POLICY "Users can view their org's credit wallet" ON credit_wallets
  FOR SELECT USING (
    "orgId" IN (
      SELECT "orgId" FROM profiles WHERE id = auth.uid()
    )
  );

CREATE POLICY "Service role can manage all credit wallets" ON credit_wallets
  FOR ALL USING (auth.role() = 'service_role');

-- RLS Policies for usage_events
CREATE POLICY "Users can view their org's usage events" ON usage_events
  FOR SELECT USING (
    "orgId" IN (
      SELECT "orgId" FROM profiles WHERE id = auth.uid()
    )
  );

CREATE POLICY "Service role can manage all usage events" ON usage_events
  FOR ALL USING (auth.role() = 'service_role');

-- RLS Policies for topup_events
CREATE POLICY "Users can view their org's topup events" ON topup_events
  FOR SELECT USING (
    "orgId" IN (
      SELECT "orgId" FROM profiles WHERE id = auth.uid()
    )
  );

CREATE POLICY "Super admins can manage all topup events" ON topup_events
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() 
      AND role = 'SUPERADMIN'
    )
  );

CREATE POLICY "Service role can manage all topup events" ON topup_events
  FOR ALL USING (auth.role() = 'service_role');

-- Function to update updatedAt timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW."updatedAt" = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to automatically update updatedAt on credit_wallets
CREATE TRIGGER update_credit_wallets_updated_at 
  BEFORE UPDATE ON credit_wallets 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

-- Comments for documentation
COMMENT ON TABLE credit_wallets IS 'Stores credit balance for each organization';
COMMENT ON TABLE usage_events IS 'Logs token usage and credit debits for audit trail';
COMMENT ON TABLE topup_events IS 'Logs manual credit additions by super admins';

COMMENT ON COLUMN credit_wallets.balance IS 'Current credit balance (integer, 1 credit = 1000 tokens max)';
COMMENT ON COLUMN usage_events."costCredits" IS 'Credits debited for this usage event';
COMMENT ON COLUMN usage_events."messageId" IS 'Unique message identifier for idempotency';
COMMENT ON COLUMN topup_events."addedCredits" IS 'Number of credits added in this top-up';