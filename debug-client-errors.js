// Script para investigar erros do lado do cliente
console.log('üîç Investigando erros do lado do cliente...');

// 1. Verificar se h√° problemas de CORS
console.log('\n1. Testando CORS e conectividade b√°sica:');
fetch('http://localhost:3000/api/health')
  .then(response => {
    console.log('‚úÖ Health check:', response.status);
    return response.json();
  })
  .then(data => console.log('Health data:', data))
  .catch(error => console.error('‚ùå Health check error:', error));

// 2. Verificar se h√° problemas com autentica√ß√£o
console.log('\n2. Verificando autentica√ß√£o:');
const token = localStorage.getItem('supabase.auth.token');
console.log('Token presente no localStorage:', !!token);

if (token) {
  try {
    const parsedToken = JSON.parse(token);
    console.log('Token v√°lido:', !!parsedToken.access_token);
    console.log('Token expira em:', new Date(parsedToken.expires_at * 1000));
  } catch (e) {
    console.error('Erro ao parsear token:', e);
  }
}

// 3. Verificar se h√° AbortController ativo
console.log('\n3. Verificando AbortController:');
window.addEventListener('beforeunload', () => {
  console.log('üö™ P√°gina sendo fechada - isso pode causar ERR_ABORTED');
});

// 4. Monitorar requisi√ß√µes que falham
console.log('\n4. Monitorando requisi√ß√µes:');
const originalFetch = window.fetch;
window.fetch = function(...args) {
  console.log('üåê Fetch iniciado:', args[0]);
  
  return originalFetch.apply(this, args)
    .then(response => {
      console.log('‚úÖ Fetch sucesso:', args[0], response.status);
      return response;
    })
    .catch(error => {
      console.error('‚ùå Fetch erro:', args[0], error.name, error.message);
      throw error;
    });
};

// 5. Verificar se h√° timeouts configurados
console.log('\n5. Verificando configura√ß√µes de timeout:');
console.log('Timeout padr√£o do navegador: ~30s');

console.log('\n‚úÖ Debug script carregado. Monitore o console para mais informa√ß√µes.');