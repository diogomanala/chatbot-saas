require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Fun√ß√£o para calcular custo em cr√©ditos (1000 tokens = 1 cr√©dito)
function calculateCreditCost(inputTokens, outputTokens) {
  const totalTokens = inputTokens + outputTokens;
  return Math.ceil(totalTokens / 1000); // Arredondar para cima
}

async function testMessageBilling() {
  try {
    console.log('üß™ [TESTE DE COBRAN√áA DE MENSAGENS]\n');
    
    // IDs de teste (substitua pelos IDs reais do seu sistema)
    const orgId = '3108d984-ed2d-44f3-a742-ca223129c5fa'; // TitecWeb Admin
    const chatbotId = '761a8909-6674-440b-9811-7a232efb8a4b'; // Assistente TitecWeb
    const deviceId = '9d166619-e7cf-4f5e-9637-65c6f4d2481f';
    
    // Buscar uma organiza√ß√£o e device para o teste
    const { data: device } = await supabase
      .from('devices')
      .select('*, organizations(id, name)')
      .limit(1)
      .single();
    
    if (!device) {
      console.log('‚ùå Nenhum device encontrado para teste');
      return;
    }
    
    console.log(`üì± Usando device: ${device.id}`);
    console.log(`üè¢ Organiza√ß√£o: ${device.organizations.name}\n`);
    
    // Verificar saldo atual
    const { data: wallet } = await supabase
      .from('credit_wallets')
      .select('balance')
      .eq('org_id', device.org_id)
      .single();
    
    const currentBalance = wallet?.balance || 0;
    console.log(`üí∞ Saldo atual: ${currentBalance} cr√©ditos\n`);
    
    // Simular diferentes cen√°rios de mensagens
    const testScenarios = [
      {
        name: 'Mensagem Curta',
        content: 'Ol√°, como posso ajudar?',
        expectedTokens: 150
      },
      {
        name: 'Mensagem M√©dia',
        content: 'Ol√°! Sou seu assistente virtual e estou aqui para ajudar com suas d√∫vidas. Posso fornecer informa√ß√µes sobre nossos produtos e servi√ßos. Como posso ajud√°-lo hoje?',
        expectedTokens: 400
      },
      {
        name: 'Mensagem Longa',
        content: 'Prezado cliente, agradecemos seu contato! Nossa empresa est√° comprometida em oferecer o melhor atendimento e solu√ß√µes personalizadas para suas necessidades. Temos uma ampla gama de produtos e servi√ßos que podem atender perfeitamente ao que voc√™ procura. Nossa equipe de especialistas est√° sempre dispon√≠vel para esclarecer d√∫vidas e fornecer suporte t√©cnico completo. Al√©m disso, oferecemos garantia estendida e suporte p√≥s-venda diferenciado. Gostar√≠amos de agendar uma reuni√£o para apresentar nossas solu√ß√µes em detalhes.',
        expectedTokens: 800
      }
    ];
    
    for (let i = 0; i < testScenarios.length; i++) {
      const scenario = testScenarios[i];
      console.log(`\nüéØ Testando: ${scenario.name}`);
      console.log(`üìù Conte√∫do: ${scenario.content.substring(0, 50)}...`);
      
      // Criar mensagem de teste
      const { data: message, error: insertError } = await supabase
        .from('messages')
        .insert({
          org_id: orgId,
          chatbot_id: chatbotId,
          device_id: deviceId,
          phone_number: '+5522997603813',
          contact_name: 'Teste Usuario',
          message_content: scenario.content,
          direction: 'outbound',
          sender_phone: 'bot',
          receiver_phone: '5522997603813@s.whatsapp.net',
          content: scenario.content,
          status: 'sent',
          tokens_used: scenario.expectedTokens,
          billing_status: 'pending',
          metadata: {
            generated_by: 'test',
            test_scenario: scenario.name
          }
        })
        .select()
        .single();
      
      if (insertError) {
        console.log(`‚ùå Erro ao criar mensagem: ${insertError.message}`);
        continue;
      }
      
      console.log(`‚úÖ Mensagem criada: ${message.id}`);
      console.log(`üî¢ Tokens: ${message.tokens_used}`);
      
      // Calcular custo
      const costCredits = calculateCreditCost(message.tokens_used, 0);
      console.log(`üí∞ Custo calculado: ${costCredits} cr√©ditos`);
      
      // Verificar saldo antes do d√©bito
      const { data: walletBefore } = await supabase
        .from('credit_wallets')
        .select('balance')
        .eq('org_id', orgId)
        .single();
      
      const balanceBefore = walletBefore?.balance || 0;
      console.log(`üí≥ Saldo antes: ${balanceBefore} cr√©ditos`);
      
      if (balanceBefore < costCredits) {
        console.log(`‚ö†Ô∏è  Saldo insuficiente para este teste`);
        
        // Marcar como failed
        await supabase
          .from('messages')
          .update({
            billing_status: 'failed',
            cost_credits: costCredits,
            charged_at: new Date().toISOString()
          })
          .eq('id', message.id);
        
        console.log(`‚ùå Mensagem marcada como 'failed'`);
        continue;
      }
      
      // Processar d√©bito
      const { error: debitError } = await supabase
        .from('credit_wallets')
        .update({ 
          balance: balanceBefore - costCredits,
          updated_at: new Date().toISOString()
        })
        .eq('org_id', orgId);
      
      if (debitError) {
        console.log(`‚ùå Erro ao debitar: ${debitError.message}`);
        continue;
      }
      
      // Marcar mensagem como charged
      await supabase
        .from('messages')
        .update({
          billing_status: 'charged',
          cost_credits: costCredits,
          charged_at: new Date().toISOString()
        })
        .eq('id', message.id);
      
      // Registrar transa√ß√£o
      await supabase
        .from('transactions')
        .insert({
          org_id: orgId,
          type: 'debit',
          amount: costCredits,
          description: `Teste: ${scenario.name} - Mensagem ${message.id}`,
          metadata: {
            message_id: message.id,
            tokens_used: message.tokens_used,
            test_scenario: scenario.name
          }
        });
      
      // Verificar saldo ap√≥s d√©bito
      const { data: walletAfter } = await supabase
        .from('credit_wallets')
        .select('balance')
        .eq('org_id', device.org_id)
        .single();
      
      console.log(`üí≥ Saldo depois: ${walletAfter.balance} cr√©ditos`);
      console.log(`‚úÖ D√©bito realizado com sucesso!`);
      
      // Aguardar um pouco entre os testes
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('\nüìä [RESUMO DOS TESTES]');
    
    // Buscar mensagens de teste criadas
    const { data: testMessages } = await supabase
      .from('messages')
      .select('*')
      .eq('org_id', device.org_id)
      .contains('metadata', { generated_by: 'test' })
      .order('created_at', { ascending: false });
    
    console.log(`‚úÖ Mensagens de teste criadas: ${testMessages?.length || 0}`);
    
    let totalCharged = 0;
    let totalFailed = 0;
    
    testMessages?.forEach(msg => {
      if (msg.billing_status === 'charged') {
        totalCharged += msg.cost_credits || 0;
      } else if (msg.billing_status === 'failed') {
        totalFailed++;
      }
    });
    
    console.log(`üí∞ Total debitado: ${totalCharged} cr√©ditos`);
    console.log(`‚ùå Mensagens falharam: ${totalFailed}`);
    
    // Verificar saldo final
    const { data: finalWallet } = await supabase
      .from('credit_wallets')
      .select('balance')
      .eq('org_id', device.org_id)
      .single();
    
    console.log(`üí≥ Saldo final: ${finalWallet?.balance || 0} cr√©ditos`);
    console.log('üéâ Teste conclu√≠do!\n');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testMessageBilling();