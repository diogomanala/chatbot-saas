/**
 * TESTE DIRETO DO SISTEMA SIMPLIFICADO DE COBRAN√áA
 * 
 * Este script testa diretamente o SimplifiedBillingService
 * simulando uma mensagem outbound sem depender da API OpenAI
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Simular o SimplifiedBillingService localmente
class TestBillingService {
  static calculateTokens(text) {
    return Math.max(Math.ceil(text.length * 0.75), 50); // M√≠nimo 50 tokens
  }

  static calculateCredits(tokens) {
    return Math.ceil(tokens / 100); // 1 cr√©dito por 100 tokens
  }

  static async insertMessageWithBilling(messageData, orgId) {
    const calculatedTokens = this.calculateTokens(messageData.message_content);
    const creditsNeeded = this.calculateCredits(calculatedTokens);

    console.log(`üìä Tokens calculados: ${calculatedTokens}`);
    console.log(`üí∞ Cr√©ditos necess√°rios: ${creditsNeeded}`);

    // 1. Verificar saldo
    const { data: orgCredits, error: creditsError } = await supabase
      .from('organization_credits')
      .select('balance')
      .eq('org_id', orgId)
      .single();

    if (creditsError || !orgCredits) {
      throw new Error(`Erro ao verificar saldo: ${creditsError?.message}`);
    }

    console.log(`üí≥ Saldo atual: ${orgCredits.balance} cr√©ditos`);

    if (orgCredits.balance < creditsNeeded) {
      throw new Error(`Saldo insuficiente. Necess√°rio: ${creditsNeeded}, Dispon√≠vel: ${orgCredits.balance}`);
    }

    // 2. Inserir mensagem
    const { data: message, error: messageError } = await supabase
      .from('messages')
      .insert({
        ...messageData,
        tokens_used: calculatedTokens,
        cost_credits: creditsNeeded,
        billing_status: 'pending'
      })
      .select()
      .single();

    if (messageError) {
      throw new Error(`Erro ao inserir mensagem: ${messageError.message}`);
    }

    console.log(`‚úÖ Mensagem inserida: ${message.id}`);

    // 3. Debitar cr√©ditos
    const { error: debitError } = await supabase
      .from('organization_credits')
      .update({
        balance: orgCredits.balance - creditsNeeded,
        updated_at: new Date().toISOString()
      })
      .eq('org_id', orgId);

    if (debitError) {
      // Reverter mensagem em caso de erro
      await supabase
        .from('messages')
        .update({
          billing_status: 'failed',
          charged_at: new Date().toISOString()
        })
        .eq('id', message.id);
      
      throw new Error(`Erro ao debitar cr√©ditos: ${debitError.message}`);
    }

    // 4. Atualizar status da mensagem
    const { error: updateError } = await supabase
      .from('messages')
      .update({
        billing_status: 'debited',
        charged_at: new Date().toISOString()
      })
      .eq('id', message.id);

    if (updateError) {
      console.warn(`‚ö†Ô∏è Aviso: Erro ao atualizar status da mensagem: ${updateError.message}`);
    }

    console.log(`üí∏ Cr√©ditos debitados: ${creditsNeeded}`);
    console.log(`üí≥ Novo saldo: ${orgCredits.balance - creditsNeeded}`);

    return {
      success: true,
      messageId: message.id,
      tokensUsed: calculatedTokens,
      creditsDebited: creditsNeeded,
      newBalance: orgCredits.balance - creditsNeeded
    };
  }
}

async function testDirectBilling() {
  console.log('üß™ TESTE DIRETO DO SISTEMA SIMPLIFICADO DE COBRAN√áA\n');

  try {
    // 1. Buscar dados necess√°rios
    const { data: orgs, error: orgError } = await supabase
      .from('organizations')
      .select('id, name')
      .limit(1);

    if (orgError || !orgs || orgs.length === 0) {
      console.error('‚ùå Erro ao buscar organiza√ß√µes:', orgError);
      return;
    }

    const org = orgs[0];
    console.log(`üìã Organiza√ß√£o: ${org.name} (${org.id})`);

    // 2. Verificar saldo inicial
    const { data: initialCredits, error: creditsError } = await supabase
      .from('organization_credits')
      .select('balance')
      .eq('org_id', org.id)
      .single();

    if (creditsError || !initialCredits) {
      console.error('‚ùå Erro ao verificar saldo inicial:', creditsError);
      return;
    }

    console.log(`üí∞ Saldo inicial: ${initialCredits.balance} cr√©ditos`);

    // 3. Buscar device e chatbot
    const { data: devices } = await supabase
      .from('devices')
      .select('id, session_name, instance_id')
      .eq('org_id', org.id)
      .not('instance_id', 'is', null)
      .limit(1);

    const { data: chatbots } = await supabase
      .from('chatbots')
      .select('id, name')
      .eq('org_id', org.id)
      .limit(1);

    if (!devices || devices.length === 0 || !chatbots || chatbots.length === 0) {
      console.error('‚ùå Device ou chatbot n√£o encontrado');
      return;
    }

    const device = devices[0];
    const chatbot = chatbots[0];

    console.log(`üì± Device: ${device.session_name}`);
    console.log(`ü§ñ Chatbot: ${chatbot.name}`);

    // 4. Simular mensagem outbound
    const messageData = {
      org_id: org.id,
      chatbot_id: chatbot.id,
      device_id: device.id,
      phone_number: '5511999999999',
      sender_phone: device.instance_id,
      receiver_phone: '5511999999999',
      message_content: 'Esta √© uma resposta autom√°tica do chatbot para testar o sistema de cobran√ßa simplificado. O sistema deve calcular os tokens, debitar os cr√©ditos e atualizar o saldo da organiza√ß√£o.',
      content: 'Esta √© uma resposta autom√°tica do chatbot para testar o sistema de cobran√ßa simplificado. O sistema deve calcular os tokens, debitar os cr√©ditos e atualizar o saldo da organiza√ß√£o.',
      direction: 'outbound',
      status: 'sent'
    };

    console.log('\nüì® Simulando mensagem outbound...');
    console.log(`üìè Conte√∫do: "${messageData.message_content.substring(0, 50)}..."`);
    console.log(`üìä Tamanho: ${messageData.message_content.length} caracteres`);

    // 5. Processar cobran√ßa
    const result = await TestBillingService.insertMessageWithBilling(messageData, org.id);

    console.log('\n‚úÖ COBRAN√áA PROCESSADA COM SUCESSO!');
    console.log(`   üì® ID da mensagem: ${result.messageId}`);
    console.log(`   üî¢ Tokens usados: ${result.tokensUsed}`);
    console.log(`   üí∏ Cr√©ditos debitados: ${result.creditsDebited}`);
    console.log(`   üí≥ Novo saldo: ${result.newBalance}`);

    // 6. Verificar resultado final
    const { data: finalCredits } = await supabase
      .from('organization_credits')
      .select('balance')
      .eq('org_id', org.id)
      .single();

    const { data: savedMessage } = await supabase
      .from('messages')
      .select('*')
      .eq('id', result.messageId)
      .single();

    console.log('\nüîç VERIFICA√á√ÉO FINAL:');
    console.log(`   üí∞ Saldo confirmado: ${finalCredits?.balance || 'N/A'} cr√©ditos`);
    console.log(`   üìä Diferen√ßa: ${initialCredits.balance - (finalCredits?.balance || 0)} cr√©ditos`);
    console.log(`   üì® Status da mensagem: ${savedMessage?.billing_status || 'N/A'}`);
    console.log(`   üî¢ Tokens na mensagem: ${savedMessage?.tokens_used || 0}`);
    console.log(`   üí∏ Cr√©ditos na mensagem: ${savedMessage?.cost_credits || 0}`);
    console.log(`   üìÖ Data de cobran√ßa: ${savedMessage?.charged_at || 'N/A'}`);

    // 7. Validar sucesso
    const expectedBalance = initialCredits.balance - result.creditsDebited;
    const actualBalance = finalCredits?.balance || 0;

    if (Math.abs(expectedBalance - actualBalance) < 0.01) {
      console.log('\nüéâ TESTE PASSOU: Sistema de cobran√ßa funcionando perfeitamente!');
      console.log('   ‚úì Saldo debitado corretamente');
      console.log('   ‚úì Mensagem salva com status "debited"');
      console.log('   ‚úì Tokens calculados e registrados');
      console.log('   ‚úì Data de cobran√ßa registrada');
    } else {
      console.log('\n‚ùå TESTE FALHOU: Inconsist√™ncia no saldo');
      console.log(`   Esperado: ${expectedBalance}`);
      console.log(`   Atual: ${actualBalance}`);
    }

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Executar teste
testDirectBilling();