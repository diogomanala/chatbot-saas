require('dotenv').config({ path: '.env.local' });

async function resetEvolutionInstance() {
    console.log('üîÑ [RESET] Iniciando procedimento de reset e reconfigura√ß√£o...');
    
    const instanceName = 'medical-crm-fb4f70d9-9f69-4c7f-8188-e412057aeb77';
    const apiKey = process.env.EVOLUTION_API_KEY;
    const baseUrl = process.env.EVOLUTION_API_URL;
    const webhookUrl = 'https://saas-chatbot-production.vercel.app/api/webhook/evolution';
    
    if (!apiKey || !baseUrl) {
        console.error('‚ùå [RESET] Vari√°veis de ambiente n√£o configuradas');
        return;
    }

    try {
        // ETAPA 1: Atualizar configura√ß√£o do webhook
        console.log('üì° [STEP 1] Atualizando configura√ß√£o do webhook...');
        const webhookResponse = await fetch(`${baseUrl}/webhook/set/${instanceName}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'apikey': apiKey
            },
            body: JSON.stringify({
                webhook: {
                    url: webhookUrl,
                    enabled: true,
                    events: ['MESSAGES_UPSERT', 'CONNECTION_UPDATE'],
                    webhookByEvents: true,
                    webhookBase64: false
                }
            })
        });

        if (webhookResponse.ok) {
            const webhookResult = await webhookResponse.json();
            console.log('‚úÖ [WEBHOOK] Configura√ß√£o atualizada com sucesso:');
            console.log('üîó [WEBHOOK] URL:', webhookResult.url);
            console.log('üìã [WEBHOOK] Eventos:', webhookResult.events);
            console.log('‚úÖ [WEBHOOK] Ativo:', webhookResult.enabled);
        } else {
            const errorText = await webhookResponse.text();
            console.log('‚ùå [WEBHOOK] Erro ao atualizar webhook:', webhookResponse.status, errorText);
            return;
        }

        // ETAPA 2: For√ßar desconex√£o da inst√¢ncia
        console.log('\nüîå [STEP 2] For√ßando desconex√£o da inst√¢ncia...');
        const logoutResponse = await fetch(`${baseUrl}/instance/logout/${instanceName}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'apikey': apiKey
            }
        });

        if (logoutResponse.ok) {
            const logoutResult = await logoutResponse.json();
            console.log('‚úÖ [LOGOUT] Inst√¢ncia desconectada com sucesso:', logoutResult);
        } else {
            const errorText = await logoutResponse.text();
            console.log('‚ö†Ô∏è [LOGOUT] Resposta da desconex√£o:', logoutResponse.status, errorText);
            // Continuar mesmo se houver erro, pois a inst√¢ncia pode j√° estar desconectada
        }

        // Aguardar um momento para garantir que a desconex√£o foi processada
        console.log('‚è≥ [WAIT] Aguardando 3 segundos para processar desconex√£o...');
        await new Promise(resolve => setTimeout(resolve, 3000));

        // ETAPA 3: Gerar novo QR Code para reconex√£o
        console.log('\nüì± [STEP 3] Gerando novo QR Code para reconex√£o...');
        const connectResponse = await fetch(`${baseUrl}/instance/connect/${instanceName}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'apikey': apiKey
            }
        });

        if (connectResponse.ok) {
            const connectResult = await connectResponse.json();
            console.log('‚úÖ [QR_CODE] Novo QR Code gerado com sucesso!');
            
            if (connectResult.base64) {
                console.log('üñºÔ∏è [QR_CODE] QR Code em Base64:');
                console.log(connectResult.base64);
                console.log('\nüìã [QR_CODE] Para visualizar o QR Code:');
                console.log('1. Copie o c√≥digo Base64 acima');
                console.log('2. Cole em um decodificador Base64 para imagem');
                console.log('3. Ou use: data:image/png;base64,' + connectResult.base64);
            }
            
            if (connectResult.code) {
                console.log('üîó [QR_CODE] C√≥digo QR:', connectResult.code);
            }
            
            console.log('üì± [QR_CODE] Status:', connectResult.status || 'Aguardando conex√£o');
            
        } else {
            const errorText = await connectResponse.text();
            console.log('‚ùå [QR_CODE] Erro ao gerar QR Code:', connectResponse.status, errorText);
            return;
        }

        // ETAPA 4: Verificar status final
        console.log('\nüîç [STEP 4] Verificando configura√ß√£o final...');
        
        // Verificar webhook atualizado
        const finalWebhookResponse = await fetch(`${baseUrl}/webhook/find/${instanceName}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'apikey': apiKey
            }
        });

        if (finalWebhookResponse.ok) {
            const finalWebhook = await finalWebhookResponse.json();
            console.log('‚úÖ [FINAL] Configura√ß√£o final do webhook:');
            console.log('üîó [FINAL] URL:', finalWebhook.url);
            console.log('üìã [FINAL] Eventos:', finalWebhook.events);
            console.log('‚úÖ [FINAL] Ativo:', finalWebhook.enabled);
            console.log('üîÑ [FINAL] Por eventos:', finalWebhook.webhookByEvents);
        }

        // Verificar status da inst√¢ncia
        const statusResponse = await fetch(`${baseUrl}/instance/connectionState/${instanceName}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'apikey': apiKey
            }
        });

        if (statusResponse.ok) {
            const status = await statusResponse.json();
            console.log('üìä [FINAL] Status da inst√¢ncia:', status);
        }

        console.log('\nüéâ [SUCCESS] Procedimento de reset conclu√≠do com sucesso!');
        console.log('üìã [NEXT] Pr√≥ximos passos:');
        console.log('1. Escaneie o QR Code com o WhatsApp');
        console.log('2. Aguarde a conex√£o ser estabelecida');
        console.log('3. Teste o envio de mensagens');
        console.log('4. Verifique se os webhooks est√£o funcionando');

    } catch (error) {
        console.error('‚ùå [RESET] Erro geral:', error);
    }
}

resetEvolutionInstance();