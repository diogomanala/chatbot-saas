const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixOrphanMessage() {
  console.log('üîß Corrigindo mensagem outbound √≥rf√£ sem billing_status...\n');

  try {
    // 1. Buscar mensagens outbound sem billing_status
    console.log('üîç Buscando mensagens outbound sem billing_status...');
    const { data: orphanMessages, error } = await supabase
      .from('messages')
      .select('id, direction, message_content, billing_status, tokens_used, cost_credits, created_at, org_id')
      .eq('direction', 'outbound')
      .is('billing_status', null);

    if (error) {
      console.error('‚ùå Erro ao buscar mensagens √≥rf√£s:', error);
      return;
    }

    console.log(`üìã Encontradas ${orphanMessages?.length || 0} mensagens √≥rf√£s\n`);

    if (!orphanMessages || orphanMessages.length === 0) {
      console.log('‚úÖ Nenhuma mensagem √≥rf√£ encontrada!');
      return;
    }

    // 2. Processar cada mensagem √≥rf√£
    for (const message of orphanMessages) {
      console.log(`üîß Processando mensagem: ${message.id}`);
      console.log(`   Conte√∫do: "${(message.message_content || '').substring(0, 50)}..."`);
      console.log(`   Criado em: ${message.created_at}`);
      console.log(`   Org ID: ${message.org_id}`);

      // Calcular tokens se n√£o existir
      let tokens = message.tokens_used || 0;
      if (tokens === 0 && message.message_content) {
        // Estimativa simples: 1 token por 4 caracteres
        tokens = Math.ceil(message.message_content.length / 4);
        console.log(`   üìä Tokens calculados: ${tokens}`);
      }

      // Calcular cr√©ditos (1 cr√©dito por 200 tokens)
      const credits = Math.ceil(tokens / 200);
      console.log(`   üí∞ Cr√©ditos necess√°rios: ${credits}`);

      // Verificar saldo da organiza√ß√£o na tabela credit_wallets
      const { data: walletData, error: walletError } = await supabase
        .from('credit_wallets')
        .select('balance')
        .eq('org_id', message.org_id)
        .single();

      if (walletError) {
        console.error(`   ‚ùå Erro ao buscar saldo da org ${message.org_id}:`, walletError);
        continue;
      }

      const currentBalance = walletData?.balance || 0;
      console.log(`   üí≥ Saldo atual da org: ${currentBalance} cr√©ditos`);

      let newStatus = 'failed';
      let newBalance = currentBalance;

      if (currentBalance >= credits) {
        // Tem saldo suficiente - debitar
        newBalance = currentBalance - credits;
        newStatus = 'charged';
        
        // Atualizar saldo da organiza√ß√£o na tabela credit_wallets
        const { error: balanceError } = await supabase
          .from('credit_wallets')
          .update({ balance: newBalance })
          .eq('org_id', message.org_id);

        if (balanceError) {
          console.error(`   ‚ùå Erro ao atualizar saldo:`, balanceError);
          continue;
        }

        console.log(`   ‚úÖ Saldo debitado: ${currentBalance} ‚Üí ${newBalance}`);
      } else {
        console.log(`   ‚ùå Saldo insuficiente para cobran√ßa`);
      }

      // Atualizar status da mensagem
      const { error: updateError } = await supabase
        .from('messages')
        .update({
          billing_status: newStatus,
          tokens_used: tokens,
          cost_credits: credits,
          charged_at: new Date().toISOString()
        })
        .eq('id', message.id);

      if (updateError) {
        console.error(`   ‚ùå Erro ao atualizar mensagem:`, updateError);
        continue;
      }

      console.log(`   ‚úÖ Mensagem atualizada: billing_status = "${newStatus}"`);
      console.log('');
    }

    console.log('üéØ CORRE√á√ÉO CONCLU√çDA!');
    console.log('‚úÖ Todas as mensagens outbound √≥rf√£s foram processadas');
    console.log('‚úÖ Status de cobran√ßa definido baseado no saldo dispon√≠vel');
    console.log('‚úÖ Tokens e cr√©ditos calculados e registrados');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar a corre√ß√£o
fixOrphanMessage();