require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

async function verifyOrgChatbotMapping() {
    console.log('üîç Verificando mapeamento org_id -> chatbot_id...\n');
    
    // Credenciais fornecidas pelo usu√°rio
    const orgId = '3108d984-ed2d-44f3-a742-ca223129c5fa';
    const expectedChatbotId = 'f99ae725-f996-483d-8813-cde922d8877a';
    
    console.log('üìã Credenciais a verificar:');
    console.log(`   üè¢ Org ID: ${orgId}`);
    console.log(`   ü§ñ Expected Chatbot ID: ${expectedChatbotId}\n`);
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
        console.log('‚ùå Credenciais do Supabase n√£o encontradas');
        return;
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    try {
        // 1. Verificar se a organiza√ß√£o existe
        console.log('üè¢ 1. Verificando organiza√ß√£o...');
        const { data: org, error: orgError } = await supabase
            .from('organizations')
            .select('*')
            .eq('id', orgId)
            .single();
        
        if (orgError) {
            console.log(`   ‚ùå Erro ao buscar organiza√ß√£o: ${orgError.message}`);
            return;
        }
        
        if (!org) {
            console.log('   ‚ùå Organiza√ß√£o n√£o encontrada');
            return;
        }
        
        console.log(`   ‚úÖ Organiza√ß√£o encontrada: ${org.name}`);
        console.log(`   üìß Email: ${org.email || 'N/A'}`);
        console.log(`   üìÖ Criada em: ${new Date(org.created_at).toLocaleString()}\n`);
        
        // 2. Verificar se o chatbot existe
        console.log('ü§ñ 2. Verificando chatbot...');
        const { data: chatbot, error: chatbotError } = await supabase
            .from('chatbots')
            .select('*')
            .eq('id', expectedChatbotId)
            .single();
        
        if (chatbotError) {
            console.log(`   ‚ùå Erro ao buscar chatbot: ${chatbotError.message}`);
            return;
        }
        
        if (!chatbot) {
            console.log('   ‚ùå Chatbot n√£o encontrado');
            return;
        }
        
        console.log(`   ‚úÖ Chatbot encontrado: ${chatbot.name}`);
        console.log(`   üè¢ Org ID do chatbot: ${chatbot.organization_id}`);
        console.log(`   üìÖ Criado em: ${new Date(chatbot.created_at).toLocaleString()}`);
        console.log(`   üîß Ativo: ${chatbot.is_active ? 'Sim' : 'N√£o'}\n`);
        
        // 3. Verificar se o mapeamento est√° correto
        console.log('üîó 3. Verificando mapeamento...');
        if (chatbot.organization_id === orgId) {
            console.log('   ‚úÖ Mapeamento correto! Chatbot pertence √† organiza√ß√£o');
        } else {
            console.log(`   ‚ùå Mapeamento incorreto!`);
            console.log(`      Esperado: ${orgId}`);
            console.log(`      Encontrado: ${chatbot.organization_id}`);
        }
        
        // 4. Buscar todos os chatbots da organiza√ß√£o
        console.log('\nü§ñ 4. Listando todos os chatbots da organiza√ß√£o...');
        const { data: allChatbots, error: allChatbotsError } = await supabase
            .from('chatbots')
            .select('id, name, is_active, created_at')
            .eq('organization_id', orgId);
        
        if (allChatbotsError) {
            console.log(`   ‚ùå Erro ao buscar chatbots: ${allChatbotsError.message}`);
        } else if (allChatbots && allChatbots.length > 0) {
            console.log(`   ‚úÖ ${allChatbots.length} chatbot(s) encontrado(s):`);
            allChatbots.forEach((bot, index) => {
                const isExpected = bot.id === expectedChatbotId ? ' ‚≠ê (ESPERADO)' : '';
                const status = bot.is_active ? 'üü¢' : 'üî¥';
                console.log(`      ${index + 1}. ${status} ${bot.name} (${bot.id})${isExpected}`);
                console.log(`         üìÖ Criado: ${new Date(bot.created_at).toLocaleString()}`);
            });
        } else {
            console.log('   ‚ö†Ô∏è  Nenhum chatbot encontrado para esta organiza√ß√£o');
        }
        
        // 5. Verificar dispositivos conectados
        console.log('\nüì± 5. Verificando dispositivos conectados...');
        const { data: devices, error: devicesError } = await supabase
            .from('whatsapp_devices')
            .select('*')
            .eq('organization_id', orgId);
        
        if (devicesError) {
            console.log(`   ‚ùå Erro ao buscar dispositivos: ${devicesError.message}`);
        } else if (devices && devices.length > 0) {
            console.log(`   ‚úÖ ${devices.length} dispositivo(s) encontrado(s):`);
            devices.forEach((device, index) => {
                const status = device.is_connected ? 'üü¢ Conectado' : 'üî¥ Desconectado';
                console.log(`      ${index + 1}. ${status} - ${device.device_name || device.instance_id}`);
                console.log(`         üÜî Instance: ${device.instance_id}`);
                console.log(`         ü§ñ Chatbot: ${device.chatbot_id}`);
                console.log(`         üìÖ √öltima conex√£o: ${device.last_connected_at ? new Date(device.last_connected_at).toLocaleString() : 'N/A'}`);
            });
        } else {
            console.log('   ‚ö†Ô∏è  Nenhum dispositivo encontrado para esta organiza√ß√£o');
        }
        
        // 6. Verificar mensagens recentes
        console.log('\nüì¨ 6. Verificando mensagens recentes...');
        const { data: messages, error: messagesError } = await supabase
            .from('messages')
            .select('*')
            .eq('organization_id', orgId)
            .order('created_at', { ascending: false })
            .limit(5);
        
        if (messagesError) {
            console.log(`   ‚ùå Erro ao buscar mensagens: ${messagesError.message}`);
        } else if (messages && messages.length > 0) {
            console.log(`   ‚úÖ ${messages.length} mensagem(ns) recente(s):`);
            messages.forEach((msg, index) => {
                const direction = msg.is_from_user ? 'üì• Recebida' : 'üì§ Enviada';
                const timestamp = new Date(msg.created_at).toLocaleString();
                const content = msg.content ? msg.content.substring(0, 50) + '...' : 'N/A';
                console.log(`      ${index + 1}. ${direction} [${timestamp}]`);
                console.log(`         üí¨ ${content}`);
                console.log(`         ü§ñ Chatbot: ${msg.chatbot_id}`);
                console.log(`         üì± Device: ${msg.device_id}`);
            });
        } else {
            console.log('   ‚ö†Ô∏è  Nenhuma mensagem encontrada para esta organiza√ß√£o');
        }
        
        console.log('\nüìã DIAGN√ìSTICO FINAL:');
        console.log('='.repeat(50));
        
        if (org && chatbot && chatbot.organization_id === orgId) {
            console.log('‚úÖ Mapeamento org_id -> chatbot_id est√° correto');
            
            if (chatbot.is_active) {
                console.log('‚úÖ Chatbot est√° ativo');
                
                if (devices && devices.some(d => d.is_connected)) {
                    console.log('‚úÖ Pelo menos um dispositivo est√° conectado');
                    console.log('\nüí° SISTEMA CONFIGURADO CORRETAMENTE!');
                    console.log('üîß Se ainda n√£o est√° recebendo mensagens:');
                    console.log('   1. Verifique se est√° enviando mensagens para o n√∫mero correto');
                    console.log('   2. Verifique os logs do Vercel');
                    console.log('   3. Teste com uma mensagem simples');
                } else {
                    console.log('‚ùå Nenhum dispositivo conectado');
                }
            } else {
                console.log('‚ùå Chatbot est√° inativo');
            }
        } else {
            console.log('‚ùå Problema no mapeamento ou configura√ß√£o');
        }
        
    } catch (error) {
        console.log(`‚ùå Erro geral: ${error.message}`);
    }
}

verifyOrgChatbotMapping().catch(console.error);