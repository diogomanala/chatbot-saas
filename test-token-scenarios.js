require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');
// Fun√ß√£o calculateCreditCost copiada do pricing.ts
const TOKENS_PER_CREDIT = 1000;
function calculateCreditCost(inputTokens, outputTokens) {
  const totalTokens = inputTokens + outputTokens;
  return Math.ceil(totalTokens / TOKENS_PER_CREDIT);
}

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testTokenScenarios() {
  try {
    const orgId = '3108d984-ed2d-44f3-a742-ca223129c5fa'; // TitecWeb Admin
    
    console.log('üß™ Testando cen√°rios de tokens conforme especifica√ß√£o do usu√°rio...');
    console.log('üìã Regra: 1.000 tokens = 1 cr√©dito');
    console.log('');
    
    // Cen√°rio 1: Mensagem curta (~200 tokens = 1 cr√©dito)
    console.log('üìù Cen√°rio 1: Mensagem curta');
    const shortInputTokens = 100;
    const shortOutputTokens = 100;
    const shortTotalTokens = shortInputTokens + shortOutputTokens;
    const shortCredits = calculateCreditCost(shortInputTokens, shortOutputTokens);
    
    console.log(`   Input tokens: ${shortInputTokens}`);
    console.log(`   Output tokens: ${shortOutputTokens}`);
    console.log(`   Total tokens: ${shortTotalTokens}`);
    console.log(`   Cr√©ditos calculados: ${shortCredits}`);
    console.log(`   ‚úÖ Resultado esperado: 1 cr√©dito (${shortTotalTokens} tokens < 1000)`);
    console.log('');
    
    // Cen√°rio 2: Mensagem m√©dia (~1500 tokens = 2 cr√©ditos)
    console.log('üìù Cen√°rio 2: Mensagem m√©dia');
    const mediumInputTokens = 800;
    const mediumOutputTokens = 700;
    const mediumTotalTokens = mediumInputTokens + mediumOutputTokens;
    const mediumCredits = calculateCreditCost(mediumInputTokens, mediumOutputTokens);
    
    console.log(`   Input tokens: ${mediumInputTokens}`);
    console.log(`   Output tokens: ${mediumOutputTokens}`);
    console.log(`   Total tokens: ${mediumTotalTokens}`);
    console.log(`   Cr√©ditos calculados: ${mediumCredits}`);
    console.log(`   ‚úÖ Resultado esperado: 2 cr√©ditos (${mediumTotalTokens} tokens > 1000, < 2000)`);
    console.log('');
    
    // Cen√°rio 3: Mensagem longa (~2500 tokens = 3 cr√©ditos)
    console.log('üìù Cen√°rio 3: Mensagem longa');
    const longInputTokens = 1200;
    const longOutputTokens = 1300;
    const longTotalTokens = longInputTokens + longOutputTokens;
    const longCredits = calculateCreditCost(longInputTokens, longOutputTokens);
    
    console.log(`   Input tokens: ${longInputTokens}`);
    console.log(`   Output tokens: ${longOutputTokens}`);
    console.log(`   Total tokens: ${longTotalTokens}`);
    console.log(`   Cr√©ditos calculados: ${longCredits}`);
    console.log(`   ‚úÖ Resultado esperado: 3 cr√©ditos (${longTotalTokens} tokens > 2000, < 3000)`);
    console.log('');
    
    // Cen√°rio 4: Mensagem muito longa (~4500 tokens = 5 cr√©ditos)
    console.log('üìù Cen√°rio 4: Mensagem muito longa');
    const veryLongInputTokens = 2000;
    const veryLongOutputTokens = 2500;
    const veryLongTotalTokens = veryLongInputTokens + veryLongOutputTokens;
    const veryLongCredits = calculateCreditCost(veryLongInputTokens, veryLongOutputTokens);
    
    console.log(`   Input tokens: ${veryLongInputTokens}`);
    console.log(`   Output tokens: ${veryLongOutputTokens}`);
    console.log(`   Total tokens: ${veryLongTotalTokens}`);
    console.log(`   Cr√©ditos calculados: ${veryLongCredits}`);
    console.log(`   ‚úÖ Resultado esperado: 5 cr√©ditos (${veryLongTotalTokens} tokens > 4000, < 5000)`);
    console.log('');
    
    // Verificar saldo atual
    console.log('üí∞ Verificando saldo atual da carteira...');
    const { data: wallet, error: walletError } = await supabase
      .from('credit_wallets')
      .select('*')
      .eq('org_id', orgId)
      .single();
    
    if (walletError) {
      console.error('‚ùå Erro ao buscar carteira:', walletError);
      return;
    }
    
    console.log(`   Saldo atual: ${wallet.balance} cr√©ditos`);
    
    // Simular d√©bito do cen√°rio 3 (mensagem longa)
    console.log('');
    console.log('üîÑ Simulando d√©bito do Cen√°rio 3 (mensagem longa - 3 cr√©ditos)...');
    
    if (wallet.balance < longCredits) {
      console.log('‚ö†Ô∏è Saldo insuficiente para realizar o d√©bito!');
      return;
    }
    
    console.log('‚úÖ Valida√ß√£o dos c√°lculos conclu√≠da!');
    console.log(`   Cen√°rio testado: ${longTotalTokens} tokens = ${longCredits} cr√©ditos`);
    console.log(`   Saldo dispon√≠vel: ${wallet.balance} cr√©ditos`);
    console.log(`   D√©bito seria poss√≠vel: ${wallet.balance >= longCredits ? 'Sim' : 'N√£o'}`);
    
    console.log('');
    console.log('üìä Resumo dos testes:');
    console.log(`   ‚úÖ Mensagem curta (${shortTotalTokens} tokens) = ${shortCredits} cr√©dito`);
    console.log(`   ‚úÖ Mensagem m√©dia (${mediumTotalTokens} tokens) = ${mediumCredits} cr√©ditos`);
    console.log(`   ‚úÖ Mensagem longa (${longTotalTokens} tokens) = ${longCredits} cr√©ditos`);
    console.log(`   ‚úÖ Mensagem muito longa (${veryLongTotalTokens} tokens) = ${veryLongCredits} cr√©ditos`);
    console.log('');
    console.log('üéØ Sistema implementado conforme especifica√ß√£o:');
    console.log('   "1 cr√©dito = 1 mensagem" (comercialmente)');
    console.log('   "1.000 tokens = 1 cr√©dito" (tecnicamente)');
    console.log('   Mensagens curtas = 1 cr√©dito');
    console.log('   Mensagens longas = 2-5 cr√©ditos');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    throw error;
  }
}

// Executar o teste
testTokenScenarios()
  .then(() => {
    console.log('\nüéâ Teste de cen√°rios de tokens conclu√≠do com sucesso!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• Falha no teste:', error);
    process.exit(1);
  });