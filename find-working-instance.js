require('dotenv').config();
const axios = require('axios');

const EVOLUTION_URL = process.env.EVOLUTION_API_URL;
const EVOLUTION_KEY = process.env.EVOLUTION_API_KEY;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

console.log('üîç ENCONTRANDO INST√ÇNCIA FUNCIONAL...\n');

async function findWorkingInstance() {
    try {
        console.log('üìã Configura√ß√µes:');
        console.log(`URL: ${EVOLUTION_URL}`);
        console.log(`Webhook URL: ${WEBHOOK_URL}`);
        console.log(`Key: ${EVOLUTION_KEY ? '***configurada***' : 'N√ÉO CONFIGURADA'}\n`);

        // 1. Listar todas as inst√¢ncias
        console.log('1Ô∏è‚É£ Listando todas as inst√¢ncias...');
        const instancesResponse = await axios.get(
            `${EVOLUTION_URL}/instance/fetchInstances`,
            {
                headers: {
                    'apikey': EVOLUTION_KEY,
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log(`üìä Total de inst√¢ncias: ${instancesResponse.data.length}\n`);

        // 2. Testar cada inst√¢ncia
        for (const instance of instancesResponse.data) {
            console.log(`üîç Testando inst√¢ncia: ${instance.instanceName || instance.id}`);
            console.log(`üì± ID: ${instance.id}`);
            console.log(`üîó Status: ${instance.connectionStatus}`);
            console.log(`üë§ Propriet√°rio: ${instance.ownerJid || 'N√£o definido'}`);

            // Tentar verificar se a inst√¢ncia aceita configura√ß√µes de webhook
            try {
                const webhookCheckResponse = await axios.get(
                    `${EVOLUTION_URL}/webhook/find/${instance.id}`,
                    {
                        headers: {
                            'apikey': EVOLUTION_KEY,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                console.log('‚úÖ Esta inst√¢ncia aceita configura√ß√µes de webhook!');
                console.log('üìã Configura√ß√£o atual:', JSON.stringify(webhookCheckResponse.data, null, 2));

                // Se a inst√¢ncia est√° open, tentar configurar o webhook
                if (instance.connectionStatus === 'open') {
                    console.log('\nüîß Configurando webhook para esta inst√¢ncia...');
                    
                    const webhookConfig = {
                        url: WEBHOOK_URL,
                        enabled: true,
                        events: [
                            'MESSAGES_UPSERT',
                            'CONNECTION_UPDATE'
                        ]
                    };

                    try {
                        const setWebhookResponse = await axios.post(
                            `${EVOLUTION_URL}/webhook/set/${instance.id}`,
                            webhookConfig,
                            {
                                headers: {
                                    'apikey': EVOLUTION_KEY,
                                    'Content-Type': 'application/json'
                                }
                            }
                        );

                        console.log('üéâ WEBHOOK CONFIGURADO COM SUCESSO!');
                        console.log('üìä Resposta:', JSON.stringify(setWebhookResponse.data, null, 2));
                        
                        console.log('\nüìù ATUALIZE SEU .ENV COM ESTAS INFORMA√á√ïES:');
                        console.log(`EVOLUTION_INSTANCE="${instance.id}"`);
                        
                        // Testar envio de mensagem
                        if (instance.ownerJid) {
                            console.log('\nüì§ Enviando mensagem de teste...');
                            const testMessage = {
                                number: instance.ownerJid.replace('@s.whatsapp.net', ''),
                                text: `ü§ñ Teste de webhook configurado com sucesso!\n\nInst√¢ncia: ${instance.instanceName || instance.id}\nHor√°rio: ${new Date().toLocaleString()}`
                            };

                            try {
                                const sendResponse = await axios.post(
                                    `${EVOLUTION_URL}/message/sendText/${instance.id}`,
                                    testMessage,
                                    {
                                        headers: {
                                            'apikey': EVOLUTION_KEY,
                                            'Content-Type': 'application/json'
                                        }
                                    }
                                );

                                console.log('‚úÖ Mensagem de teste enviada!');
                                console.log('üìä Resposta:', JSON.stringify(sendResponse.data, null, 2));
                                
                                console.log('\nüéØ INST√ÇNCIA FUNCIONAL ENCONTRADA E CONFIGURADA!');
                                console.log(`üì± Use esta inst√¢ncia: ${instance.id}`);
                                console.log('üì± Verifique se recebeu a mensagem de teste no WhatsApp');
                                
                                return; // Parar aqui, encontramos uma inst√¢ncia funcional
                                
                            } catch (sendError) {
                                console.log('‚ùå Erro ao enviar mensagem de teste:', sendError.response?.data || sendError.message);
                            }
                        }
                        
                    } catch (setError) {
                        console.log('‚ùå Erro ao configurar webhook:', setError.response?.data || setError.message);
                    }
                }

            } catch (webhookError) {
                console.log('‚ùå Esta inst√¢ncia n√£o aceita configura√ß√µes de webhook:', webhookError.response?.data?.message || webhookError.message);
            }

            console.log('‚îÄ'.repeat(50));
        }

        console.log('\n‚ùå Nenhuma inst√¢ncia funcional encontrada.');

    } catch (error) {
        console.error('‚ùå Erro geral:', error.response?.data || error.message);
    }
}

findWorkingInstance();