// Script para testar processamento em lote local
// const fs = require('fs');
// const path = require('path');

// Simular dados de mensagens pendentes (baseado no que vimos no SQL)
const mockMessages = [
  {
    id: 'msg-001',
    org_id: 'org-123',
    message_content: 'Esta √© uma mensagem de teste para calcular tokens e cr√©ditos necess√°rios.',
    tokens_used: 0,
    direction: 'outbound',
    billing_status: null,
    created_at: new Date().toISOString()
  },
  {
    id: 'msg-002', 
    org_id: 'org-123',
    message_content: 'Outra mensagem mais longa para testar o c√°lculo de tokens baseado no comprimento do conte√∫do da mensagem.',
    tokens_used: 0,
    direction: 'outbound',
    billing_status: 'pending',
    created_at: new Date().toISOString()
  }
];

// Simular saldo da organiza√ß√£o
const mockBalance = 1093;

// Implementar l√≥gica de c√°lculo local (mesma do AutoDebitService)
function calculateTokens(messageContent, tokensUsed) {
  if (tokensUsed && tokensUsed > 0) {
    return tokensUsed;
  }
  // F√≥rmula: 1 token ‚âà 4 caracteres
  return Math.ceil(messageContent.length / 4);
}

function calculateCredits(tokens) {
  // F√≥rmula: 1000 tokens = 1 cr√©dito
  return Math.ceil(tokens / 1000);
}

function testBatchProcessing() {
  console.log('üß™ Teste de Processamento em Lote - AutoDebit');
  console.log('=' .repeat(50));
  
  let totalCreditsNeeded = 0;
  let processableMessages = 0;
  
  console.log(`üí∞ Saldo atual da organiza√ß√£o: ${mockBalance} cr√©ditos\n`);
  
  mockMessages.forEach((message, index) => {
    console.log(`üì® Mensagem ${index + 1}: ${message.id}`);
    console.log(`   Org ID: ${message.org_id}`);
    console.log(`   Dire√ß√£o: ${message.direction}`);
    console.log(`   Status: ${message.billing_status || 'null'}`);
    console.log(`   Conte√∫do: "${message.message_content.substring(0, 50)}..."`);
    console.log(`   Tamanho: ${message.message_content.length} caracteres`);
    
    if (message.direction === 'outbound') {
      const tokens = calculateTokens(message.message_content, message.tokens_used);
      const credits = calculateCredits(tokens);
      
      console.log(`   üìè Tokens calculados: ${tokens}`);
      console.log(`   üí≥ Cr√©ditos necess√°rios: ${credits}`);
      
      totalCreditsNeeded += credits;
      processableMessages++;
      
      console.log(`   ‚úÖ Process√°vel: Sim`);
    } else {
      console.log(`   ‚è≠Ô∏è  Process√°vel: N√£o (mensagem inbound)`);
    }
    
    console.log('');
  });
  
  console.log('üìä Resumo do Processamento:');
  console.log(`   Mensagens analisadas: ${mockMessages.length}`);
  console.log(`   Mensagens process√°veis: ${processableMessages}`);
  console.log(`   Total de cr√©ditos necess√°rios: ${totalCreditsNeeded}`);
  console.log(`   Saldo dispon√≠vel: ${mockBalance}`);
  console.log(`   Saldo suficiente: ${mockBalance >= totalCreditsNeeded ? '‚úÖ Sim' : '‚ùå N√£o'}`);
  
  if (mockBalance >= totalCreditsNeeded) {
    console.log(`   Saldo ap√≥s processamento: ${mockBalance - totalCreditsNeeded}`);
  } else {
    console.log(`   ‚ö†Ô∏è  D√©ficit: ${totalCreditsNeeded - mockBalance} cr√©ditos`);
  }
  
  console.log('\nüîç Diagn√≥stico:');
  
  if (processableMessages === 0) {
    console.log('   ‚ùå Problema: Nenhuma mensagem outbound encontrada');
  } else if (totalCreditsNeeded === 0) {
    console.log('   ‚ùå Problema: C√°lculo de cr√©ditos resultou em 0');
  } else if (mockBalance < totalCreditsNeeded) {
    console.log('   ‚ùå Problema: Saldo insuficiente para processar mensagens');
  } else {
    console.log('   ‚úÖ Tudo parece estar correto para processamento');
    console.log('   üí° O problema pode estar na conectividade com o Supabase');
  }
  
  console.log('\nüõ†Ô∏è  Pr√≥ximos passos recomendados:');
  console.log('   1. Verificar conectividade com Supabase');
  console.log('   2. Testar credenciais de acesso ao banco');
  console.log('   3. Verificar se o webhook est√° sendo chamado');
  console.log('   4. Analisar logs do servidor de produ√ß√£o');
}

testBatchProcessing();