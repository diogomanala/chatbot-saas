const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env.local') });
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üîç Verificando configura√ß√µes do Supabase...');
console.log('URL:', supabaseUrl ? '‚úÖ Definida' : '‚ùå N√£o definida');
console.log('Anon Key:', supabaseAnonKey ? `‚úÖ Definida (${supabaseAnonKey.length} chars)` : '‚ùå N√£o definida');
console.log('Service Key:', supabaseServiceKey ? `‚úÖ Definida (${supabaseServiceKey.length} chars)` : '‚ùå N√£o definida');

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Configura√ß√µes b√°sicas do Supabase n√£o encontradas');
  process.exit(1);
}

// Teste com chave anon
const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey);

// Teste com chave service (se dispon√≠vel)
let supabaseService = null;
if (supabaseServiceKey && supabaseServiceKey.length > 20) {
  supabaseService = createClient(supabaseUrl, supabaseServiceKey);
}

async function testConnection() {
  console.log('\nüß™ Testando conex√£o com Supabase...');
  
  try {
    // Teste 1: Verificar se consegue conectar
    console.log('\n1Ô∏è‚É£ Teste b√°sico de conectividade...');
    const { error } = await supabaseAnon
      .from('messages')
      .select('count')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erro na conex√£o:', error.message);
    } else {
      console.log('‚úÖ Conex√£o estabelecida com sucesso');
    }

    // Teste 2: Buscar mensagens (com chave anon)
    console.log('\n2Ô∏è‚É£ Buscando mensagens com chave anon...');
    const { data: messages, error: messagesError } = await supabaseAnon
      .from('messages')
      .select('id, message_content, direction, billing_status')
      .limit(3);
    
    if (messagesError) {
      console.log('‚ùå Erro ao buscar mensagens:', messagesError.message);
    } else {
      console.log(`‚úÖ Encontradas ${messages?.length || 0} mensagens`);
      if (messages && messages.length > 0) {
        messages.forEach((msg, i) => {
          console.log(`   ${i+1}. ID: ${msg.id}`);
          console.log(`      Dire√ß√£o: ${msg.direction}`);
          console.log(`      Status: ${msg.billing_status || 'null'}`);
          console.log(`      Conte√∫do: "${msg.message_content?.substring(0, 50)}..."`);
        });
      }
    }

    // Teste 3: Verificar cr√©ditos da organiza√ß√£o
    console.log('\n3Ô∏è‚É£ Verificando cr√©ditos da organiza√ß√£o...');
    const { data: credits, error: creditsError } = await supabaseAnon
      .from('organization_credits')
      .select('org_id, balance')
      .limit(3);
    
    if (creditsError) {
      console.log('‚ùå Erro ao buscar cr√©ditos:', creditsError.message);
    } else {
      console.log(`‚úÖ Encontradas ${credits?.length || 0} organiza√ß√µes com cr√©ditos`);
      if (credits && credits.length > 0) {
        credits.forEach((org, i) => {
          console.log(`   ${i+1}. Org: ${org.org_id}`);
          console.log(`      Saldo: ${org.balance} cr√©ditos`);
        });
      }
    }

    // Teste 4: Com chave service (se dispon√≠vel)
    if (supabaseService) {
      console.log('\n4Ô∏è‚É£ Testando com chave service role...');
      const { error: serviceError } = await supabaseService
        .from('messages')
        .select('id')
        .limit(1);
      
      if (serviceError) {
        console.log('‚ùå Erro com chave service:', serviceError.message);
      } else {
        console.log('‚úÖ Chave service funcionando');
      }
    } else {
      console.log('\n4Ô∏è‚É£ ‚ö†Ô∏è  Chave service role n√£o dispon√≠vel ou incompleta');
    }

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error.message);
    console.error('Stack:', error.stack);
  }
}

testConnection();