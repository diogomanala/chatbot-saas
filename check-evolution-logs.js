require('dotenv').config();
const axios = require('axios');

const EVOLUTION_URL = process.env.EVOLUTION_API_URL;
const EVOLUTION_KEY = process.env.EVOLUTION_API_KEY;
const EVOLUTION_INSTANCE = process.env.EVOLUTION_INSTANCE;

console.log('üîç VERIFICANDO LOGS DA EVOLUTION API...\n');

async function checkEvolutionLogs() {
    try {
        console.log('üìã Configura√ß√µes:');
        console.log(`URL: ${EVOLUTION_URL}`);
        console.log(`Instance: ${EVOLUTION_INSTANCE}`);
        console.log(`Key: ${EVOLUTION_KEY ? '***configurada***' : 'N√ÉO CONFIGURADA'}\n`);

        // 1. Verificar status da inst√¢ncia
        console.log('1Ô∏è‚É£ Verificando status da inst√¢ncia...');
        const statusResponse = await axios.get(
            `${EVOLUTION_URL}/instance/fetchInstances`,
            {
                headers: {
                    'apikey': EVOLUTION_KEY,
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log('Status das inst√¢ncias:', JSON.stringify(statusResponse.data, null, 2));

        // 2. Verificar conex√£o espec√≠fica da inst√¢ncia
        console.log('\n2Ô∏è‚É£ Verificando conex√£o da inst√¢ncia espec√≠fica...');
        try {
            const connectionResponse = await axios.get(
                `${EVOLUTION_URL}/instance/connectionState/${EVOLUTION_INSTANCE}`,
                {
                    headers: {
                        'apikey': EVOLUTION_KEY,
                        'Content-Type': 'application/json'
                    }
                }
            );
            console.log('Estado da conex√£o:', JSON.stringify(connectionResponse.data, null, 2));
        } catch (error) {
            console.log('‚ùå Erro ao verificar conex√£o:', error.response?.data || error.message);
        }

        // 3. Verificar webhook atual
        console.log('\n3Ô∏è‚É£ Verificando configura√ß√£o do webhook...');
        try {
            const webhookResponse = await axios.get(
                `${EVOLUTION_URL}/webhook/find/${EVOLUTION_INSTANCE}`,
                {
                    headers: {
                        'apikey': EVOLUTION_KEY,
                        'Content-Type': 'application/json'
                    }
                }
            );
            console.log('Configura√ß√£o do webhook:', JSON.stringify(webhookResponse.data, null, 2));
        } catch (error) {
            console.log('‚ùå Erro ao verificar webhook:', error.response?.data || error.message);
        }

        // 4. Tentar obter informa√ß√µes da inst√¢ncia
        console.log('\n4Ô∏è‚É£ Obtendo informa√ß√µes detalhadas da inst√¢ncia...');
        try {
            const instanceResponse = await axios.get(
                `${EVOLUTION_URL}/instance/connect/${EVOLUTION_INSTANCE}`,
                {
                    headers: {
                        'apikey': EVOLUTION_KEY,
                        'Content-Type': 'application/json'
                    }
                }
            );
            console.log('Informa√ß√µes da inst√¢ncia:', JSON.stringify(instanceResponse.data, null, 2));
        } catch (error) {
            console.log('‚ùå Erro ao obter informa√ß√µes:', error.response?.data || error.message);
        }

    } catch (error) {
        console.error('‚ùå Erro geral:', error.response?.data || error.message);
    }
}

checkEvolutionLogs();