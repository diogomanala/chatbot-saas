const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });
require('dotenv').config({ path: '.env' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function debugTokens() {
  console.log('üîç DEBUGANDO PROBLEMA DOS TOKENS = 0\n');
  
  try {
    // 1. Verificar mensagens recentes
    console.log('üì® Verificando mensagens recentes...');
    const { data: messages, error } = await supabase
      .from('messages')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (error) {
      console.error('‚ùå Erro ao buscar mensagens:', error);
      return;
    }
    
    console.log(`\nüìä Encontradas ${messages.length} mensagens:\n`);
    
    let outboundWithZeroTokens = 0;
    let outboundWithTokens = 0;
    
    messages.forEach((msg, i) => {
      const tokens = msg.tokens_used || 0;
      const content = msg.message_content || msg.content || '';
      
      console.log(`üì® Mensagem ${i+1}:`);
      console.log(`   ID: ${msg.id}`);
      console.log(`   Dire√ß√£o: ${msg.direction}`);
      console.log(`   Conte√∫do: "${content.substring(0, 50)}..."`);
      console.log(`   Tokens: ${tokens}`);
      console.log(`   Status: ${msg.billing_status}`);
      console.log(`   Cr√©ditos: ${msg.cost_credits || 0}`);
      console.log(`   Data: ${msg.created_at}`);
      
      if (msg.direction === 'outbound') {
        if (tokens === 0) {
          outboundWithZeroTokens++;
          console.log(`   ‚ö†Ô∏è PROBLEMA: Mensagem outbound com tokens = 0!`);
        } else {
          outboundWithTokens++;
          console.log(`   ‚úÖ OK: Mensagem outbound com tokens = ${tokens}`);
        }
      }
      console.log('');
    });
    
    // 2. Resumo do problema
    console.log('üìä RESUMO DO PROBLEMA:');
    console.log(`   Mensagens outbound com tokens = 0: ${outboundWithZeroTokens}`);
    console.log(`   Mensagens outbound com tokens > 0: ${outboundWithTokens}`);
    
    if (outboundWithZeroTokens > 0) {
      console.log('\nüö® PROBLEMA IDENTIFICADO:');
      console.log('   Mensagens outbound est√£o sendo salvas com tokens_used = 0');
      console.log('   Isso impede a cobran√ßa correta');
    }
    
    // 3. Verificar saldo da organiza√ß√£o
    console.log('\nüí∞ Verificando saldos das organiza√ß√µes...');
    const { data: credits, error: creditsError } = await supabase
      .from('organization_credits')
      .select('*');
      
    if (creditsError) {
      console.error('‚ùå Erro ao buscar cr√©ditos:', creditsError);
    } else {
      credits.forEach(org => {
        console.log(`   Org ${org.org_id}: ${org.balance} cr√©ditos`);
      });
    }
    
    // 4. Testar c√°lculo de tokens
    console.log('\nüî¢ TESTANDO C√ÅLCULO DE TOKENS:');
    const testMessages = [
      'Ol√°, como posso ajudar?',
      'Esta √© uma mensagem de teste para verificar o c√°lculo de tokens.',
      'Mensagem muito longa para testar se o c√°lculo est√° funcionando corretamente com textos maiores que podem ter mais tokens.'
    ];
    
    testMessages.forEach((text, i) => {
      const estimatedTokens = Math.max(Math.ceil(text.length / 4) + 50, 50);
      const credits = Math.max(Math.ceil(estimatedTokens / 1000), 1);
      
      console.log(`   Teste ${i+1}: "${text.substring(0, 30)}..."`);
      console.log(`     Caracteres: ${text.length}`);
      console.log(`     Tokens estimados: ${estimatedTokens}`);
      console.log(`     Cr√©ditos: ${credits}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

debugTokens();